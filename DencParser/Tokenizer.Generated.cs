//
//  This CSharp output file generated by Gardens Point LEX
//  Version:  1.1.5.305
//  Machine:  THORCELAP2
//  DateTime: 2/20/2011 3:46:40 PM
//  UserName: thor
//  GPLEX input file <Tokenizer.gplex - 2/20/2011 3:46:35 PM>
//  GPLEX frame file <embedded resource>
//
//  Option settings: verbose, parser, stack, minimize
//  Option settings: compressNext, persistBuffer, noEmbedBuffers
//

//
// Experimental embedded frame
// Version 1.1.4 of 10-May-2010
//
//
#define BACKUP
#define STACK
#define PERSIST
#define BYTEMODE

using System;
using System.Collections.Generic;
using System.Diagnostics.CodeAnalysis;
using System.IO;
using QUT.GplexBuffers;
using QUT.Gppg;

namespace Thorsbrain.Denc.Parser
{
    /// <summary>
    /// Summary Canonical example of GPLEX automaton
    /// </summary>

#if STANDALONE
    //
    // These are the dummy declarations for stand-alone GPLEX applications
    // normally these declarations would come from the parser.
    // If you declare /noparser, or %option noparser then you get this.
    //

     internal enum Token
    { 
      EOF = 0, maxParseToken = int.MaxValue 
      // must have at least these two, values are almost arbitrary
    }

     internal abstract class ScanBase
    {
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly", MessageId = "yylex")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly", MessageId = "yylex")]
        public abstract int yylex();

        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly", MessageId = "yywrap")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly", MessageId = "yywrap")]
        protected virtual bool yywrap() { return true; }

#if BABEL
        protected abstract int CurrentSc { get; set; }
        // EolState is the 32-bit of state data persisted at 
        // the end of each line for Visual Studio colorization.  
        // The default is to return CurrentSc.  You must override
        // this if you want more complicated behavior.
        public virtual int EolState { 
            get { return CurrentSc; }
            set { CurrentSc = value; } 
        }
    }
    
     internal interface IColorScan
    {
        void SetSource(string source, int offset);
        int GetNext(ref int state, out int start, out int end);
#endif // BABEL
    }

#endif // STANDALONE

    // If the compiler can't find the scanner base class maybe you
    // need to run GPPG with the /gplex option, or GPLEX with /noparser
#if BABEL
     internal sealed partial class Scanner : ScanBase, IColorScan
    {
        private ScanBuff buffer;
        int currentScOrd;  // start condition ordinal
        
        protected override int CurrentSc 
        {
             // The current start state is a property
             // to try to avoid the user error of setting
             // scState but forgetting to update the FSA
             // start state "currentStart"
             //
             get { return currentScOrd; }  // i.e. return YY_START;
             set { currentScOrd = value;   // i.e. BEGIN(value);
                   currentStart = startState[value]; }
        }
#else // BABEL
    internal sealed partial class Scanner : ScanBase
    {
        private ScanBuff buffer;
        private int currentScOrd; // start condition ordinal
#endif // BABEL

        /// <summary>
        /// The input buffer for this scanner.
        /// </summary>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        public ScanBuff Buffer
        {
            get { return buffer; }
        }

        private static int GetMaxParseToken()
        {
            var f = typeof (Token).GetField("maxParseToken");
            return (f == null ? int.MaxValue : (int) f.GetValue(null));
        }

        private static int parserMax = GetMaxParseToken();

        private enum Result
        {
            accept,
            noMatch,
            contextFound
        } ;

        private const int maxAccept = 95;
        private const int initial = 96;
        private const int eofNum = 0;
        private const int goStart = -1;
        private const int INITIAL = 0;
        private const int TheRules = 1;
        private const int TheEpilog = 2;
        private const int GetPath = 3;
        private const int Prolog = 4;
        private const int Action = 5;
        private const int Comment = 6;
        private const int CodeBlock = 7;
        private const int ShouldBeBlank = 8;

        #region user code

/* Be careful Visual studio sticks the UTF8 header at the top and causes a syntax error here*/

        #endregion user code

        private int state;
        private int currentStart = startState[0];
        private int code; // last code read
        private int cCol; // column number of code
        private int lNum; // current line number
        //
        // The following instance variables are used, among other
        // things, for constructing the yylloc location objects.
        //
        private int tokPos; // buffer position at start of token
        private int tokCol; // zero-based column number at start of token
        private int tokLin; // line number at start of token
        private int tokEPos; // buffer position at end of token
        private int tokECol; // column number at end of token
        private int tokELin; // line number at end of token
        private string tokTxt; // lazily constructed text of token
#if STACK
        private Stack<int> scStack = new Stack<int>();
#endif // STACK

        #region ScannerTables

        private struct Table
        {
            public int min;
            public int rng;
            public int dflt;
            public sbyte[] nxt;

            public Table(int m, int x, int d, sbyte[] n)
            {
                min = m;
                rng = x;
                dflt = d;
                nxt = n;
            }
        } ;

        private static int[] startState = new int[]
                                              {
                                                  96, 113, 113, 113, 113, 113,
                                                  113, 113, 113, 0
                                              };

        private static Table[] NxS = new Table[114]
                                         {
/* NxS[   0] */ new Table(0, 0, 0, null), // Shortest string ""
/* NxS[   1] */ new Table(0, 0, -1, null), // Shortest string "\n"
/* NxS[   2] */ // Shortest string "\r"
                new Table(10, 1, -1, new sbyte[] {1}),
/* NxS[   3] */ // Shortest string "."
                new Table(65, 58, -1, new sbyte[]
                                          {
                                              94, 94, 94, 94, 94, 94,
                                              94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94,
                                              94, 94, 94, 94, -1, -1, -1, -1, -1, -1, 94, 94, 94, 94, 94, 94,
                                              94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94,
                                              94, 94, 94, 94
                                          }),
/* NxS[   4] */ // Shortest string "0"
                new Table(48, 70, -1, new sbyte[]
                                          {
                                              4, 4, 4, 4, 4, 4,
                                              4, 4, 4, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
                                              -1, -1, -1, -1, -1, -1, 86, -1, -1, -1, -1, -1, -1, -1, -1, 87,
                                              -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
                                              -1, -1, -1, -1, -1, -1, 88, -1, -1, -1, -1, -1, -1, -1, -1, 87
                                          }),
/* NxS[   5] */ new Table(0, 0, -1, null), // Shortest string ":"
/* NxS[   6] */ // Shortest string "A"
                new Table(36, 87, -1, new sbyte[]
                                          {
                                              9, 9, -1, -1, -1, -1,
                                              -1, -1, -1, -1, 9, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              -1, -1, -1, -1, -1, -1, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9, 9, 9, 9, 9, 9, 9, 9, 9, 27, 9, 9, 9, 9, 9, 9,
                                              9, -1, -1, -1, -1, -1, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9, 9, 9, 9, 9, 9, 9, 9, 9, 27, 9, 9, 9, 9, 9, 9,
                                              9
                                          }),
/* NxS[   7] */ // Shortest string "B"
                new Table(36, 87, -1, new sbyte[]
                                          {
                                              9, 9, -1, -1, -1, -1,
                                              -1, -1, -1, -1, 9, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              -1, -1, -1, -1, -1, -1, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9, 9, 75, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 76,
                                              9, -1, -1, -1, -1, -1, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9, 9, 75, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 76,
                                              9
                                          }),
/* NxS[   8] */ // Shortest string "C"
                new Table(36, 87, -1, new sbyte[]
                                          {
                                              9, 9, -1, -1, -1, -1,
                                              -1, -1, -1, -1, 9, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              -1, -1, -1, -1, -1, -1, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9, 9, 71, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9, -1, -1, -1, -1, -1, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9, 9, 71, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9
                                          }),
/* NxS[   9] */ // Shortest string "D"
                new Table(36, 87, -1, new sbyte[]
                                          {
                                              9, 9, -1, -1, -1, -1,
                                              -1, -1, -1, -1, 9, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              -1, -1, -1, -1, -1, -1, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9, -1, -1, -1, -1, -1, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9
                                          }),
/* NxS[  10] */ // Shortest string "I"
                new Table(36, 87, -1, new sbyte[]
                                          {
                                              9, 9, -1, -1, -1, -1,
                                              -1, -1, -1, -1, 9, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              -1, -1, -1, -1, -1, -1, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9, 9, 9, 9, 9, 68, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9, -1, -1, -1, -1, -1, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9, 9, 9, 9, 9, 68, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9
                                          }),
/* NxS[  11] */ // Shortest string "L"
                new Table(34, 89, -1, new sbyte[]
                                          {
                                              97, -1, 9, 9, -1, -1,
                                              -1, -1, -1, -1, -1, -1, 9, -1, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9, 9, -1, -1, -1, -1, -1, -1, -1, 9, 9, 9, 9, 9, 9, 9,
                                              9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9, 9, 9, -1, -1, -1, -1, -1, -1, 9, 9, 9, 9, 9, 9, 9,
                                              9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9, 9, 9
                                          }),
/* NxS[  12] */ // Shortest string "P"
                new Table(36, 87, -1, new sbyte[]
                                          {
                                              9, 9, -1, -1, -1, -1,
                                              -1, -1, -1, -1, 9, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              -1, -1, -1, -1, -1, -1, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9, 9, 9, 9, 9, 64, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9, -1, -1, -1, -1, -1, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9, 9, 9, 9, 9, 64, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9
                                          }),
/* NxS[  13] */ // Shortest string "R"
                new Table(36, 87, -1, new sbyte[]
                                          {
                                              9, 9, -1, -1, -1, -1,
                                              -1, -1, -1, -1, 9, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              -1, -1, -1, -1, -1, -1, -1, 58, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9, -1, -1, -1, -1, -1, -1, 58, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9
                                          }),
/* NxS[  14] */ // Shortest string "S"
                new Table(36, 87, -1, new sbyte[]
                                          {
                                              9, 9, -1, -1, -1, -1,
                                              -1, -1, -1, -1, 9, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              -1, -1, -1, -1, -1, -1, -1, 9, 9, 9, 9, 9, 9, 9, 9, 48,
                                              9, 9, 9, 9, 9, 9, 9, 49, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9, -1, -1, -1, -1, -1, -1, 9, 9, 9, 9, 9, 9, 9, 9, 48,
                                              9, 9, 9, 9, 9, 9, 9, 49, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9
                                          }),
/* NxS[  15] */ // Shortest string "W"
                new Table(36, 87, -1, new sbyte[]
                                          {
                                              9, 9, -1, -1, -1, -1,
                                              -1, -1, -1, -1, 9, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              -1, -1, -1, -1, -1, -1, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9, 9, 9, 9, 9, 45, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9, -1, -1, -1, -1, -1, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9, 9, 9, 9, 9, 45, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9
                                          }),
/* NxS[  16] */ // Shortest string "X"
                new Table(36, 87, -1, new sbyte[]
                                          {
                                              9, 9, -1, -1, -1, -1,
                                              -1, -1, -1, -1, 9, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              -1, -1, -1, -1, -1, -1, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 43, 9, 9,
                                              9, -1, -1, -1, -1, -1, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 43, 9, 9,
                                              9
                                          }),
/* NxS[  17] */ // Shortest string "a"
                new Table(36, 87, -1, new sbyte[]
                                          {
                                              9, 9, -1, -1, -1, -1,
                                              -1, -1, -1, -1, 9, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              -1, -1, -1, -1, -1, -1, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9, 9, 9, 9, 9, 9, 9, 9, 9, 27, 9, 9, 9, 9, 9, 9,
                                              9, -1, -1, -1, -1, -1, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9, 9, 9, 9, 9, 9, 9, 9, 28, 27, 9, 9, 9, 9, 9, 9,
                                              9
                                          }),
/* NxS[  18] */ // Shortest string "n"
                new Table(36, 87, -1, new sbyte[]
                                          {
                                              9, 9, -1, -1, -1, -1,
                                              -1, -1, -1, -1, 9, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              -1, -1, -1, -1, -1, -1, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9, -1, -1, -1, -1, -1, -1, 19, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9
                                          }),
/* NxS[  19] */ // Shortest string "na"
                new Table(36, 87, -1, new sbyte[]
                                          {
                                              9, 9, -1, -1, -1, -1,
                                              -1, -1, -1, -1, 9, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              -1, -1, -1, -1, -1, -1, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9, -1, -1, -1, -1, -1, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9, 9, 9, 20, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9
                                          }),
/* NxS[  20] */ // Shortest string "nam"
                new Table(36, 87, -1, new sbyte[]
                                          {
                                              9, 9, -1, -1, -1, -1,
                                              -1, -1, -1, -1, 9, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              -1, -1, -1, -1, -1, -1, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9, -1, -1, -1, -1, -1, -1, 9, 9, 9, 9, 21, 9, 9, 9, 9,
                                              9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9
                                          }),
/* NxS[  21] */ // Shortest string "name"
                new Table(36, 87, -1, new sbyte[]
                                          {
                                              9, 9, -1, -1, -1, -1,
                                              -1, -1, -1, -1, 9, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              -1, -1, -1, -1, -1, -1, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9, -1, -1, -1, -1, -1, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9, 9, 9, 9, 9, 9, 9, 9, 9, 22, 9, 9, 9, 9, 9, 9,
                                              9
                                          }),
/* NxS[  22] */ // Shortest string "names"
                new Table(36, 87, -1, new sbyte[]
                                          {
                                              9, 9, -1, -1, -1, -1,
                                              -1, -1, -1, -1, 9, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              -1, -1, -1, -1, -1, -1, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9, -1, -1, -1, -1, -1, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9, 9, 9, 9, 9, 9, 23, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9
                                          }),
/* NxS[  23] */ // Shortest string "namesp"
                new Table(36, 87, -1, new sbyte[]
                                          {
                                              9, 9, -1, -1, -1, -1,
                                              -1, -1, -1, -1, 9, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              -1, -1, -1, -1, -1, -1, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9, -1, -1, -1, -1, -1, -1, 24, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9
                                          }),
/* NxS[  24] */ // Shortest string "namespa"
                new Table(36, 87, -1, new sbyte[]
                                          {
                                              9, 9, -1, -1, -1, -1,
                                              -1, -1, -1, -1, 9, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              -1, -1, -1, -1, -1, -1, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9, -1, -1, -1, -1, -1, -1, 9, 9, 25, 9, 9, 9, 9, 9, 9,
                                              9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9
                                          }),
/* NxS[  25] */ // Shortest string "namespac"
                new Table(36, 87, -1, new sbyte[]
                                          {
                                              9, 9, -1, -1, -1, -1,
                                              -1, -1, -1, -1, 9, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              -1, -1, -1, -1, -1, -1, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9, -1, -1, -1, -1, -1, -1, 9, 9, 9, 9, 26, 9, 9, 9, 9,
                                              9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9
                                          }),
/* NxS[  26] */ // Shortest string "namespace"
                new Table(36, 87, -1, new sbyte[]
                                          {
                                              9, 9, -1, -1, -1, -1,
                                              -1, -1, -1, -1, 9, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              -1, -1, -1, -1, -1, -1, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9, -1, -1, -1, -1, -1, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9
                                          }),
/* NxS[  27] */ // Shortest string "AS"
                new Table(36, 87, -1, new sbyte[]
                                          {
                                              9, 9, -1, -1, -1, -1,
                                              -1, -1, -1, -1, 9, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              -1, -1, -1, -1, -1, -1, -1, 9, 9, 39, 9, 9, 9, 9, 9, 9,
                                              9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9, -1, -1, -1, -1, -1, -1, 9, 9, 39, 9, 9, 9, 9, 9, 9,
                                              9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9
                                          }),
/* NxS[  28] */ // Shortest string "ar"
                new Table(36, 87, -1, new sbyte[]
                                          {
                                              9, 9, -1, -1, -1, -1,
                                              -1, -1, -1, -1, 9, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              -1, -1, -1, -1, -1, -1, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9, -1, -1, -1, -1, -1, -1, 9, 9, 29, 9, 9, 9, 9, 9, 9,
                                              9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9
                                          }),
/* NxS[  29] */ // Shortest string "arc"
                new Table(36, 87, -1, new sbyte[]
                                          {
                                              9, 9, -1, -1, -1, -1,
                                              -1, -1, -1, -1, 9, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              -1, -1, -1, -1, -1, -1, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9, -1, -1, -1, -1, -1, -1, 9, 9, 9, 9, 9, 9, 9, 30, 9,
                                              9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9
                                          }),
/* NxS[  30] */ // Shortest string "arch"
                new Table(36, 87, -1, new sbyte[]
                                          {
                                              9, 9, -1, -1, -1, -1,
                                              -1, -1, -1, -1, 9, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              -1, -1, -1, -1, -1, -1, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9, -1, -1, -1, -1, -1, -1, 9, 9, 9, 9, 9, 9, 9, 9, 31,
                                              9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9
                                          }),
/* NxS[  31] */ // Shortest string "archi"
                new Table(36, 87, -1, new sbyte[]
                                          {
                                              9, 9, -1, -1, -1, -1,
                                              -1, -1, -1, -1, 9, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              -1, -1, -1, -1, -1, -1, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9, -1, -1, -1, -1, -1, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 32, 9, 9, 9, 9, 9,
                                              9
                                          }),
/* NxS[  32] */ // Shortest string "archit"
                new Table(36, 87, -1, new sbyte[]
                                          {
                                              9, 9, -1, -1, -1, -1,
                                              -1, -1, -1, -1, 9, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              -1, -1, -1, -1, -1, -1, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9, -1, -1, -1, -1, -1, -1, 9, 9, 9, 9, 33, 9, 9, 9, 9,
                                              9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9
                                          }),
/* NxS[  33] */ // Shortest string "archite"
                new Table(36, 87, -1, new sbyte[]
                                          {
                                              9, 9, -1, -1, -1, -1,
                                              -1, -1, -1, -1, 9, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              -1, -1, -1, -1, -1, -1, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9, -1, -1, -1, -1, -1, -1, 9, 9, 34, 9, 9, 9, 9, 9, 9,
                                              9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9
                                          }),
/* NxS[  34] */ // Shortest string "architec"
                new Table(36, 87, -1, new sbyte[]
                                          {
                                              9, 9, -1, -1, -1, -1,
                                              -1, -1, -1, -1, 9, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              -1, -1, -1, -1, -1, -1, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9, -1, -1, -1, -1, -1, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 35, 9, 9, 9, 9, 9,
                                              9
                                          }),
/* NxS[  35] */ // Shortest string "architect"
                new Table(36, 87, -1, new sbyte[]
                                          {
                                              9, 9, -1, -1, -1, -1,
                                              -1, -1, -1, -1, 9, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              -1, -1, -1, -1, -1, -1, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9, -1, -1, -1, -1, -1, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 36, 9, 9, 9, 9,
                                              9
                                          }),
/* NxS[  36] */ // Shortest string "architectu"
                new Table(36, 87, -1, new sbyte[]
                                          {
                                              9, 9, -1, -1, -1, -1,
                                              -1, -1, -1, -1, 9, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              -1, -1, -1, -1, -1, -1, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9, -1, -1, -1, -1, -1, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9, 9, 9, 9, 9, 9, 9, 9, 37, 9, 9, 9, 9, 9, 9, 9,
                                              9
                                          }),
/* NxS[  37] */ // Shortest string "architectur"
                new Table(36, 87, -1, new sbyte[]
                                          {
                                              9, 9, -1, -1, -1, -1,
                                              -1, -1, -1, -1, 9, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              -1, -1, -1, -1, -1, -1, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9, -1, -1, -1, -1, -1, -1, 9, 9, 9, 9, 38, 9, 9, 9, 9,
                                              9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9
                                          }),
/* NxS[  38] */ // Shortest string "architecture"
                new Table(36, 87, -1, new sbyte[]
                                          {
                                              9, 9, -1, -1, -1, -1,
                                              -1, -1, -1, -1, 9, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              -1, -1, -1, -1, -1, -1, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9, -1, -1, -1, -1, -1, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9
                                          }),
/* NxS[  39] */ // Shortest string "ASC"
                new Table(36, 87, -1, new sbyte[]
                                          {
                                              9, 9, -1, -1, -1, -1,
                                              -1, -1, -1, -1, 9, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              -1, -1, -1, -1, -1, -1, -1, 9, 9, 9, 9, 9, 9, 9, 9, 40,
                                              9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9, -1, -1, -1, -1, -1, -1, 9, 9, 9, 9, 9, 9, 9, 9, 40,
                                              9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9
                                          }),
/* NxS[  40] */ // Shortest string "ASCI"
                new Table(36, 87, -1, new sbyte[]
                                          {
                                              9, 9, -1, -1, -1, -1,
                                              -1, -1, -1, -1, 9, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              -1, -1, -1, -1, -1, -1, -1, 9, 9, 9, 9, 9, 9, 9, 9, 41,
                                              9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              42, -1, -1, -1, -1, -1, -1, 9, 9, 9, 9, 9, 9, 9, 9, 41,
                                              9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              42
                                          }),
/* NxS[  41] */ // Shortest string "ASCII"
                new Table(36, 87, -1, new sbyte[]
                                          {
                                              9, 9, -1, -1, -1, -1,
                                              -1, -1, -1, -1, 9, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              -1, -1, -1, -1, -1, -1, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9, -1, -1, -1, -1, -1, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9
                                          }),
/* NxS[  42] */ // Shortest string "ASCIZ"
                new Table(36, 87, -1, new sbyte[]
                                          {
                                              9, 9, -1, -1, -1, -1,
                                              -1, -1, -1, -1, 9, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              -1, -1, -1, -1, -1, -1, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9, -1, -1, -1, -1, -1, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9
                                          }),
/* NxS[  43] */ // Shortest string "XW"
                new Table(36, 87, -1, new sbyte[]
                                          {
                                              9, 9, -1, -1, -1, -1,
                                              -1, -1, -1, -1, 9, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              -1, -1, -1, -1, -1, -1, -1, 9, 9, 9, 44, 9, 9, 9, 9, 9,
                                              9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9, -1, -1, -1, -1, -1, -1, 9, 9, 9, 44, 9, 9, 9, 9, 9,
                                              9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9
                                          }),
/* NxS[  44] */ // Shortest string "XWD"
                new Table(36, 87, -1, new sbyte[]
                                          {
                                              9, 9, -1, -1, -1, -1,
                                              -1, -1, -1, -1, 9, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              -1, -1, -1, -1, -1, -1, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9, -1, -1, -1, -1, -1, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9
                                          }),
/* NxS[  45] */ // Shortest string "WO"
                new Table(36, 87, -1, new sbyte[]
                                          {
                                              9, 9, -1, -1, -1, -1,
                                              -1, -1, -1, -1, 9, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              -1, -1, -1, -1, -1, -1, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9, 9, 9, 9, 9, 9, 9, 9, 46, 9, 9, 9, 9, 9, 9, 9,
                                              9, -1, -1, -1, -1, -1, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9, 9, 9, 9, 9, 9, 9, 9, 46, 9, 9, 9, 9, 9, 9, 9,
                                              9
                                          }),
/* NxS[  46] */ // Shortest string "WOR"
                new Table(36, 87, -1, new sbyte[]
                                          {
                                              9, 9, -1, -1, -1, -1,
                                              -1, -1, -1, -1, 9, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              -1, -1, -1, -1, -1, -1, -1, 9, 9, 9, 47, 9, 9, 9, 9, 9,
                                              9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9, -1, -1, -1, -1, -1, -1, 9, 9, 9, 47, 9, 9, 9, 9, 9,
                                              9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9
                                          }),
/* NxS[  47] */ // Shortest string "WORD"
                new Table(36, 87, -1, new sbyte[]
                                          {
                                              9, 9, -1, -1, -1, -1,
                                              -1, -1, -1, -1, 9, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              -1, -1, -1, -1, -1, -1, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9, -1, -1, -1, -1, -1, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9
                                          }),
/* NxS[  48] */ // Shortest string "SI"
                new Table(36, 87, -1, new sbyte[]
                                          {
                                              9, 9, -1, -1, -1, -1,
                                              -1, -1, -1, -1, 9, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              -1, -1, -1, -1, -1, -1, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 54, 9,
                                              9, -1, -1, -1, -1, -1, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 54, 9,
                                              9
                                          }),
/* NxS[  49] */ // Shortest string "SQ"
                new Table(36, 87, -1, new sbyte[]
                                          {
                                              9, 9, -1, -1, -1, -1,
                                              -1, -1, -1, -1, 9, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              -1, -1, -1, -1, -1, -1, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 50, 9, 9, 9, 9,
                                              9, -1, -1, -1, -1, -1, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 50, 9, 9, 9, 9,
                                              9
                                          }),
/* NxS[  50] */ // Shortest string "SQU"
                new Table(36, 87, -1, new sbyte[]
                                          {
                                              9, 9, -1, -1, -1, -1,
                                              -1, -1, -1, -1, 9, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              -1, -1, -1, -1, -1, -1, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9, 9, 9, 9, 9, 51, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9, -1, -1, -1, -1, -1, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9, 9, 9, 9, 9, 51, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9
                                          }),
/* NxS[  51] */ // Shortest string "SQUO"
                new Table(36, 87, -1, new sbyte[]
                                          {
                                              9, 9, -1, -1, -1, -1,
                                              -1, -1, -1, -1, 9, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              -1, -1, -1, -1, -1, -1, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              52, -1, -1, -1, -1, -1, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              52
                                          }),
/* NxS[  52] */ // Shortest string "SQUOZ"
                new Table(36, 87, -1, new sbyte[]
                                          {
                                              9, 9, -1, -1, -1, -1,
                                              -1, -1, -1, -1, 9, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              -1, -1, -1, -1, -1, -1, -1, 9, 9, 9, 9, 53, 9, 9, 9, 9,
                                              9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9, -1, -1, -1, -1, -1, -1, 9, 9, 9, 9, 53, 9, 9, 9, 9,
                                              9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9
                                          }),
/* NxS[  53] */ // Shortest string "SQUOZE"
                new Table(36, 87, -1, new sbyte[]
                                          {
                                              9, 9, -1, -1, -1, -1,
                                              -1, -1, -1, -1, 9, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              -1, -1, -1, -1, -1, -1, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9, -1, -1, -1, -1, -1, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9
                                          }),
/* NxS[  54] */ // Shortest string "SIX"
                new Table(36, 87, -1, new sbyte[]
                                          {
                                              9, 9, -1, -1, -1, -1,
                                              -1, -1, -1, -1, 9, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              -1, -1, -1, -1, -1, -1, -1, 9, 55, 9, 9, 9, 9, 9, 9, 9,
                                              9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9, -1, -1, -1, -1, -1, -1, 9, 55, 9, 9, 9, 9, 9, 9, 9,
                                              9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9
                                          }),
/* NxS[  55] */ // Shortest string "SIXB"
                new Table(36, 87, -1, new sbyte[]
                                          {
                                              9, 9, -1, -1, -1, -1,
                                              -1, -1, -1, -1, 9, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              -1, -1, -1, -1, -1, -1, -1, 9, 9, 9, 9, 9, 9, 9, 9, 56,
                                              9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9, -1, -1, -1, -1, -1, -1, 9, 9, 9, 9, 9, 9, 9, 9, 56,
                                              9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9
                                          }),
/* NxS[  56] */ // Shortest string "SIXBI"
                new Table(36, 87, -1, new sbyte[]
                                          {
                                              9, 9, -1, -1, -1, -1,
                                              -1, -1, -1, -1, 9, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              -1, -1, -1, -1, -1, -1, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 57, 9, 9, 9, 9, 9,
                                              9, -1, -1, -1, -1, -1, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 57, 9, 9, 9, 9, 9,
                                              9
                                          }),
/* NxS[  57] */ // Shortest string "SIXBIT"
                new Table(36, 87, -1, new sbyte[]
                                          {
                                              9, 9, -1, -1, -1, -1,
                                              -1, -1, -1, -1, 9, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              -1, -1, -1, -1, -1, -1, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9, -1, -1, -1, -1, -1, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9
                                          }),
/* NxS[  58] */ // Shortest string "RA"
                new Table(36, 87, -1, new sbyte[]
                                          {
                                              9, 9, -1, -1, -1, -1,
                                              -1, -1, -1, -1, 9, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              -1, -1, -1, -1, -1, -1, -1, 9, 9, 9, 59, 9, 9, 9, 9, 9,
                                              9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9, -1, -1, -1, -1, -1, -1, 9, 9, 9, 59, 9, 9, 9, 9, 9,
                                              9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9
                                          }),
/* NxS[  59] */ // Shortest string "RAD"
                new Table(36, 87, -1, new sbyte[]
                                          {
                                              9, 9, -1, -1, -1, -1,
                                              -1, -1, -1, -1, 9, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              -1, -1, -1, -1, -1, -1, -1, 9, 9, 9, 9, 9, 9, 9, 9, 60,
                                              9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9, -1, -1, -1, -1, -1, -1, 9, 9, 9, 9, 9, 9, 9, 9, 60,
                                              9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9
                                          }),
/* NxS[  60] */ // Shortest string "RADI"
                new Table(36, 87, -1, new sbyte[]
                                          {
                                              9, 9, -1, -1, -1, -1,
                                              -1, -1, -1, -1, 9, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              -1, -1, -1, -1, -1, -1, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 61, 9,
                                              9, -1, -1, -1, -1, -1, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 61, 9,
                                              9
                                          }),
/* NxS[  61] */ // Shortest string "RADIX"
                new Table(36, 87, -1, new sbyte[]
                                          {
                                              9, 9, -1, -1, -1, -1,
                                              -1, -1, -1, -1, 9, -1, 9, 9, 9, 9, 9, 62, 9, 9, 9, 9,
                                              -1, -1, -1, -1, -1, -1, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9, -1, -1, -1, -1, -1, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9
                                          }),
/* NxS[  62] */ // Shortest string "RADIX5"
                new Table(36, 87, -1, new sbyte[]
                                          {
                                              9, 9, -1, -1, -1, -1,
                                              -1, -1, -1, -1, 9, -1, 63, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              -1, -1, -1, -1, -1, -1, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9, -1, -1, -1, -1, -1, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9
                                          }),
/* NxS[  63] */ // Shortest string "RADIX50"
                new Table(36, 87, -1, new sbyte[]
                                          {
                                              9, 9, -1, -1, -1, -1,
                                              -1, -1, -1, -1, 9, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              -1, -1, -1, -1, -1, -1, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9, -1, -1, -1, -1, -1, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9
                                          }),
/* NxS[  64] */ // Shortest string "PO"
                new Table(36, 87, -1, new sbyte[]
                                          {
                                              9, 9, -1, -1, -1, -1,
                                              -1, -1, -1, -1, 9, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              -1, -1, -1, -1, -1, -1, -1, 9, 9, 9, 9, 9, 9, 9, 9, 65,
                                              9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9, -1, -1, -1, -1, -1, -1, 9, 9, 9, 9, 9, 9, 9, 9, 65,
                                              9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9
                                          }),
/* NxS[  65] */ // Shortest string "POI"
                new Table(36, 87, -1, new sbyte[]
                                          {
                                              9, 9, -1, -1, -1, -1,
                                              -1, -1, -1, -1, 9, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              -1, -1, -1, -1, -1, -1, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9, 9, 9, 9, 66, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9, -1, -1, -1, -1, -1, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9, 9, 9, 9, 66, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9
                                          }),
/* NxS[  66] */ // Shortest string "POIN"
                new Table(36, 87, -1, new sbyte[]
                                          {
                                              9, 9, -1, -1, -1, -1,
                                              -1, -1, -1, -1, 9, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              -1, -1, -1, -1, -1, -1, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 67, 9, 9, 9, 9, 9,
                                              9, -1, -1, -1, -1, -1, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 67, 9, 9, 9, 9, 9,
                                              9
                                          }),
/* NxS[  67] */ // Shortest string "POINT"
                new Table(36, 87, -1, new sbyte[]
                                          {
                                              9, 9, -1, -1, -1, -1,
                                              -1, -1, -1, -1, 9, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              -1, -1, -1, -1, -1, -1, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9, -1, -1, -1, -1, -1, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9
                                          }),
/* NxS[  68] */ // Shortest string "IO"
                new Table(36, 87, -1, new sbyte[]
                                          {
                                              9, 9, -1, -1, -1, -1,
                                              -1, -1, -1, -1, 9, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              -1, -1, -1, -1, -1, -1, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 69, 9, 9,
                                              9, -1, -1, -1, -1, -1, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 69, 9, 9,
                                              9
                                          }),
/* NxS[  69] */ // Shortest string "IOW"
                new Table(36, 87, -1, new sbyte[]
                                          {
                                              9, 9, -1, -1, -1, -1,
                                              -1, -1, -1, -1, 9, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              -1, -1, -1, -1, -1, -1, -1, 9, 9, 9, 70, 9, 9, 9, 9, 9,
                                              9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9, -1, -1, -1, -1, -1, -1, 9, 9, 9, 70, 9, 9, 9, 9, 9,
                                              9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9
                                          }),
/* NxS[  70] */ // Shortest string "IOWD"
                new Table(36, 87, -1, new sbyte[]
                                          {
                                              9, 9, -1, -1, -1, -1,
                                              -1, -1, -1, -1, 9, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              -1, -1, -1, -1, -1, -1, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9, -1, -1, -1, -1, -1, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9
                                          }),
/* NxS[  71] */ // Shortest string "CL"
                new Table(36, 87, -1, new sbyte[]
                                          {
                                              9, 9, -1, -1, -1, -1,
                                              -1, -1, -1, -1, 9, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              -1, -1, -1, -1, -1, -1, -1, 72, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9, -1, -1, -1, -1, -1, -1, 72, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9
                                          }),
/* NxS[  72] */ // Shortest string "CLA"
                new Table(36, 87, -1, new sbyte[]
                                          {
                                              9, 9, -1, -1, -1, -1,
                                              -1, -1, -1, -1, 9, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              -1, -1, -1, -1, -1, -1, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9, 9, 9, 9, 9, 9, 9, 9, 9, 73, 9, 9, 9, 9, 9, 9,
                                              9, -1, -1, -1, -1, -1, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9, 9, 9, 9, 9, 9, 9, 9, 9, 73, 9, 9, 9, 9, 9, 9,
                                              9
                                          }),
/* NxS[  73] */ // Shortest string "CLAS"
                new Table(36, 87, -1, new sbyte[]
                                          {
                                              9, 9, -1, -1, -1, -1,
                                              -1, -1, -1, -1, 9, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              -1, -1, -1, -1, -1, -1, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9, 9, 9, 9, 9, 9, 9, 9, 9, 74, 9, 9, 9, 9, 9, 9,
                                              9, -1, -1, -1, -1, -1, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9, 9, 9, 9, 9, 9, 9, 9, 9, 74, 9, 9, 9, 9, 9, 9,
                                              9
                                          }),
/* NxS[  74] */ // Shortest string "CLASS"
                new Table(36, 87, -1, new sbyte[]
                                          {
                                              9, 9, -1, -1, -1, -1,
                                              -1, -1, -1, -1, 9, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              -1, -1, -1, -1, -1, -1, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9, -1, -1, -1, -1, -1, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9
                                          }),
/* NxS[  75] */ // Shortest string "BL"
                new Table(36, 87, -1, new sbyte[]
                                          {
                                              9, 9, -1, -1, -1, -1,
                                              -1, -1, -1, -1, 9, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              -1, -1, -1, -1, -1, -1, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9, 9, 9, 9, 9, 81, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9, -1, -1, -1, -1, -1, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9, 9, 9, 9, 9, 81, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9
                                          }),
/* NxS[  76] */ // Shortest string "BY"
                new Table(36, 87, -1, new sbyte[]
                                          {
                                              9, 9, -1, -1, -1, -1,
                                              -1, -1, -1, -1, 9, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              -1, -1, -1, -1, -1, -1, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 77, 9, 9, 9, 9, 9,
                                              9, -1, -1, -1, -1, -1, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 77, 9, 9, 9, 9, 9,
                                              9
                                          }),
/* NxS[  77] */ // Shortest string "BYT"
                new Table(36, 87, -1, new sbyte[]
                                          {
                                              9, 9, -1, -1, -1, -1,
                                              -1, -1, -1, -1, 9, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              -1, -1, -1, -1, -1, -1, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9, -1, -1, -1, -1, -1, -1, 9, 9, 9, 9, 78, 9, 9, 9, 9,
                                              9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9
                                          }),
/* NxS[  78] */ // Shortest string "BYTe"
                new Table(36, 87, -1, new sbyte[]
                                          {
                                              9, 9, -1, -1, -1, -1,
                                              -1, -1, -1, -1, 9, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              -1, -1, -1, -1, -1, -1, -1, 9, 9, 9, 9, 79, 9, 9, 9, 9,
                                              9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9, -1, -1, -1, -1, -1, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9
                                          }),
/* NxS[  79] */ // Shortest string "BYTeE"
                new Table(36, 87, -1, new sbyte[]
                                          {
                                              9, 9, -1, -1, -1, -1,
                                              -1, -1, -1, -1, 9, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              -1, -1, -1, -1, -1, -1, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9, -1, -1, 80, -1, -1, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9
                                          }),
/* NxS[  80] */ new Table(0, 0, -1, null), // Shortest string "BYTeE]"
/* NxS[  81] */ // Shortest string "BLO"
                new Table(36, 87, -1, new sbyte[]
                                          {
                                              9, 9, -1, -1, -1, -1,
                                              -1, -1, -1, -1, 9, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              -1, -1, -1, -1, -1, -1, -1, 9, 9, 82, 9, 9, 9, 9, 9, 9,
                                              9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9, -1, -1, -1, -1, -1, -1, 9, 9, 82, 9, 9, 9, 9, 9, 9,
                                              9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9
                                          }),
/* NxS[  82] */ // Shortest string "BLOC"
                new Table(36, 87, -1, new sbyte[]
                                          {
                                              9, 9, -1, -1, -1, -1,
                                              -1, -1, -1, -1, 9, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              -1, -1, -1, -1, -1, -1, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9, 83, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9, -1, -1, -1, -1, -1, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9, 83, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9
                                          }),
/* NxS[  83] */ // Shortest string "BLOCK"
                new Table(36, 87, -1, new sbyte[]
                                          {
                                              9, 9, -1, -1, -1, -1,
                                              -1, -1, -1, -1, 9, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              -1, -1, -1, -1, -1, -1, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9, -1, -1, -1, -1, -1, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                                              9
                                          }),
/* NxS[  84] */ new Table(0, 0, -1, null), // Shortest string "@@OPEN@@"
/* NxS[  85] */ new Table(0, 0, -1, null), // Shortest string "@@CLOSE@@"
/* NxS[  86] */ // Shortest string "0L"
                new Table(76, 42, -1, new sbyte[]
                                          {
                                              92, -1, -1, -1, -1, -1,
                                              -1, -1, -1, 91, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
                                              -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
                                              -1, -1, -1, 91
                                          }),
/* NxS[  87] */ // Shortest string "0U"
                new Table(76, 33, -1, new sbyte[]
                                          {
                                              89, -1, -1, -1, -1, -1,
                                              -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
                                              -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 90
                                          }),
/* NxS[  88] */ // Shortest string "0l"
                new Table(85, 33, -1, new sbyte[]
                                          {
                                              91, -1, -1, -1, -1, -1,
                                              -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
                                              -1, 92, -1, -1, -1, -1, -1, -1, -1, -1, 91
                                          }),
/* NxS[  89] */ // Shortest string "0UL"
                new Table(76, 1, -1, new sbyte[] {91}),
/* NxS[  90] */ // Shortest string "0Ul"
                new Table(108, 1, -1, new sbyte[] {91}),
/* NxS[  91] */ new Table(0, 0, -1, null), // Shortest string "0LU"
/* NxS[  92] */ // Shortest string "0LL"
                new Table(85, 33, -1, new sbyte[]
                                          {
                                              91, -1, -1, -1, -1, -1,
                                              -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
                                              -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 91
                                          }),
/* NxS[  93] */ // Shortest string "//"
                new Table(10, 1, 93, new sbyte[] {-1}),
/* NxS[  94] */ // Shortest string ".A"
                new Table(36, 87, -1, new sbyte[]
                                          {
                                              94, 94, -1, -1, -1, -1,
                                              -1, -1, -1, -1, 94, -1, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94,
                                              -1, -1, -1, -1, -1, -1, -1, 94, 94, 94, 94, 94, 94, 94, 94, 94,
                                              94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94,
                                              94, -1, -1, -1, -1, -1, -1, 94, 94, 94, 94, 94, 94, 94, 94, 94,
                                              94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94,
                                              94
                                          }),
/* NxS[  95] */ new Table(0, 0, -1, null), // Shortest string "\"\""
/* NxS[  96] */ // Shortest string ""
                new Table(10, 113, -1, new sbyte[]
                                           {
                                               1, -1, -1, 2, -1, -1,
                                               -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
                                               -1, -1, 97, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, 98,
                                               4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, -1, -1, -1, -1, -1,
                                               99, 6, 7, 8, 9, 9, 9, 9, 9, 10, 9, 9, 11, 9, 9, 9,
                                               12, 9, 13, 14, 9, 9, 9, 15, 16, 9, 9, -1, -1, -1, -1, -1,
                                               -1, 17, 7, 8, 9, 9, 9, 9, 9, 10, 9, 9, 9, 9, 18, 9,
                                               12, 9, 13, 14, 9, 9, 9, 15, 16, 9, 9
                                           }),
/* NxS[  97] */ // Shortest string "\""
                new Table(10, 83, 97, new sbyte[]
                                          {
                                              -1, 97, 97, 97, 97, 97,
                                              97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97,
                                              97, 97, 95, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97,
                                              97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97,
                                              97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97,
                                              97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 112
                                          }),
/* NxS[  98] */ // Shortest string "/"
                new Table(47, 1, -1, new sbyte[] {93}),
/* NxS[  99] */ // Shortest string "@"
                new Table(64, 1, -1, new sbyte[] {100}),
/* NxS[ 100] */ // Shortest string "@@"
                new Table(67, 13, -1, new sbyte[]
                                          {
                                              101, -1, -1, -1, -1, -1,
                                              -1, -1, -1, -1, -1, -1, 102
                                          }),
/* NxS[ 101] */ // Shortest string "@@C"
                new Table(76, 1, -1, new sbyte[] {107}),
/* NxS[ 102] */ // Shortest string "@@O"
                new Table(80, 1, -1, new sbyte[] {103}),
/* NxS[ 103] */ // Shortest string "@@OP"
                new Table(69, 1, -1, new sbyte[] {104}),
/* NxS[ 104] */ // Shortest string "@@OPE"
                new Table(78, 1, -1, new sbyte[] {105}),
/* NxS[ 105] */ // Shortest string "@@OPEN"
                new Table(64, 1, -1, new sbyte[] {106}),
/* NxS[ 106] */ // Shortest string "@@OPEN@"
                new Table(64, 1, -1, new sbyte[] {84}),
/* NxS[ 107] */ // Shortest string "@@CL"
                new Table(79, 1, -1, new sbyte[] {108}),
/* NxS[ 108] */ // Shortest string "@@CLO"
                new Table(83, 1, -1, new sbyte[] {109}),
/* NxS[ 109] */ // Shortest string "@@CLOS"
                new Table(69, 1, -1, new sbyte[] {110}),
/* NxS[ 110] */ // Shortest string "@@CLOSE"
                new Table(64, 1, -1, new sbyte[] {111}),
/* NxS[ 111] */ // Shortest string "@@CLOSE@"
                new Table(64, 1, -1, new sbyte[] {85}),
/* NxS[ 112] */ // Shortest string "\"\\"
                new Table(10, 1, 97, new sbyte[] {-1}),
/* NxS[ 113] */ new Table(0, 0, -1, null), // Shortest string ""
                                         };

        private int NextState()
        {
            if (code == ScanBuff.EndOfFile)
                return eofNum;
            else
                unchecked
                {
                    int rslt;
                    int idx = (byte) (code - NxS[state].min);
                    if ((uint) idx >= (uint) NxS[state].rng) rslt = NxS[state].dflt;
                    else rslt = NxS[state].nxt[idx];
                    return rslt;
                }
        }

        #endregion

#if BACKUP
        // ==============================================================
        // == Nested struct used for backup in automata that do backup ==
        // ==============================================================

        private struct Context // class used for automaton backup.
        {
            public int bPos;
            public int rPos; // scanner.readPos saved value
            public int cCol;
            public int lNum; // Need this in case of backup over EOL.
            public int state;
            public int cChr;
        }

        private Context ctx = new Context();
#endif // BACKUP

        // ==============================================================
        // ==== Nested struct to support input switching in scanners ====
        // ==============================================================

        private struct BufferContext
        {
            internal ScanBuff buffSv;
            internal int chrSv;
            internal int cColSv;
            internal int lNumSv;
        }

        // ==============================================================
        // ===== Private methods to save and restore buffer contexts ====
        // ==============================================================

        /// <summary>
        /// This method creates a buffer context record from
        /// the current buffer object, together with some
        /// scanner state values. 
        /// </summary>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        private BufferContext MkBuffCtx()
        {
            BufferContext rslt;
            rslt.buffSv = buffer;
            rslt.chrSv = code;
            rslt.cColSv = cCol;
            rslt.lNumSv = lNum;
            return rslt;
        }

        /// <summary>
        /// This method restores the buffer value and allied
        /// scanner state from the given context record value.
        /// </summary>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        private void RestoreBuffCtx(BufferContext value)
        {
            buffer = value.buffSv;
            code = value.chrSv;
            cCol = value.cColSv;
            lNum = value.lNumSv;
        }

        // =================== End Nested classes =======================

#if !NOFILES
        internal Scanner(Stream file)
        {
            SetSource(file); // no unicode option
        }
#endif // !NOFILES

        internal Scanner() {}

        private int readPos;

        private void GetCode()
        {
            if (code == '\n') // This needs to be fixed for other conventions
                // i.e. [\r\n\205\u2028\u2029]
            {
                cCol = -1;
                lNum++;
            }
            readPos = buffer.Pos;

            // Now read new codepoint.
            code = buffer.Read();
            if (code > ScanBuff.EndOfFile)
#if (!BYTEMODE)
                if (code >= 0xD800 && code <= 0xDBFF)
                {
                    int next = buffer.Read();
                    if (next < 0xDC00 || next > 0xDFFF)
                        code = ScanBuff.UnicodeReplacementChar;
                    else
                        code = (0x10000 + ((code & 0x3FF) << 10) + (next & 0x3FF));
                }
#endif
                cCol++;
        }

        private void MarkToken()
        {
#if (!PERSIST)
            buffer.Mark();
#endif
            tokPos = readPos;
            tokLin = lNum;
            tokCol = cCol;
        }

        private void MarkEnd()
        {
            tokTxt = null;
            tokEPos = readPos;
            tokELin = lNum;
            tokECol = cCol;
        }

        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        private int Peek()
        {
            int rslt, codeSv = code, cColSv = cCol, lNumSv = lNum, bPosSv = buffer.Pos;
            GetCode();
            rslt = code;
            lNum = lNumSv;
            cCol = cColSv;
            code = codeSv;
            buffer.Pos = bPosSv;
            return rslt;
        }

        // ==============================================================
        // =====    Initialization of string-based input buffers     ====
        // ==============================================================

        /// <summary>
        /// Create and initialize a StringBuff buffer object for this scanner
        /// </summary>
        /// <param name="source">the input string</param>
        /// <param name="offset">starting offset in the string</param>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        public void SetSource(string source, int offset)
        {
            buffer = ScanBuff.GetBuffer(source);
            buffer.Pos = offset;
            lNum = 0;
            code = '\n'; // to initialize yyline, yycol and lineStart
            GetCode();
        }

        // ================ LineBuffer Initialization ===================
        /// <summary>
        /// Create and initialize a LineBuff buffer object for this scanner
        /// </summary>
        /// <param name="source">the list of input strings</param>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        public void SetSource(IList<string> source)
        {
            buffer = ScanBuff.GetBuffer(source);
            code = '\n'; // to initialize yyline, yycol and lineStart
            lNum = 0;
            GetCode();
        }

#if !NOFILES
        // =============== StreamBuffer Initialization ==================

        /// <summary>
        /// Create and initialize a StreamBuff buffer object for this scanner.
        /// StreamBuff is buffer for 8-bit byte files.
        /// </summary>
        /// <param name="source">the input byte stream</param>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        public void SetSource(Stream source)
        {
            buffer = ScanBuff.GetBuffer(source);
            lNum = 0;
            code = '\n'; // to initialize yyline, yycol and lineStart
            GetCode();
        }

#if !BYTEMODE
    // ================ TextBuffer Initialization ===================

    /// <summary>
    /// Create and initialize a TextBuff buffer object for this scanner.
    /// TextBuff is a buffer for encoded unicode files.
    /// </summary>
    /// <param name="source">the input text file</param>
    /// <param name="fallbackCodePage">Code page to use if file has
    /// no BOM. For 0, use machine default; for -1, 8-bit binary</param>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        public void SetSource(Stream source, int fallbackCodePage)
        {
            this.buffer = ScanBuff.GetBuffer(source, fallbackCodePage);
            this.lNum = 0;
            this.code = '\n'; // to initialize yyline, yycol and lineStart
            GetCode();
        }
#endif // !BYTEMODE
#endif // !NOFILES

        // ==============================================================

#if BABEL
    //
    //  Get the next token for Visual Studio
    //
    //  "state" is the inout mode variable that maintains scanner
    //  state between calls, using the EolState property. In principle,
    //  if the calls of EolState are costly set could be called once
    //  only per line, at the start; and get called only at the end
    //  of the line. This needs more infrastructure ...
    //
        public int GetNext(ref int state, out int start, out int end)
        {
                Token next;
            int s, e;
            s = state;        // state at start
            EolState = state;
                next = (Token)Scan();
            state = EolState;
            e = state;       // state at end;
            start = tokPos;
            end = tokEPos - 1; // end is the index of last char.
            return (int)next;
        }
#endif // BABEL

        // ======== AbstractScanner<> Implementation =========

        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly", MessageId = "yylex")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly", MessageId = "yylex")]
        public override int yylex()
        {
            // parserMax is set by reflecting on the Tokens
            // enumeration.  If maxParseToken is defined
            // that is used, otherwise int.MaxValue is used.
            int next;
            do
            {
                next = Scan();
            } while (next >= parserMax);

            var tok = (Token) next;
            Console.WriteLine("Token: " + tok.ToString());

            return next;
        }

        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        private int yypos
        {
            get { return tokPos; }
        }

        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        private int yyline
        {
            get { return tokLin; }
        }

        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        private int yycol
        {
            get { return tokCol; }
        }

        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly", MessageId = "yytext")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly", MessageId = "yytext")]
        public string yytext
        {
            get
            {
                if (tokTxt == null)
                    tokTxt = buffer.GetString(tokPos, tokEPos);
                return tokTxt;
            }
        }

        /// <summary>
        /// Discards all but the first "n" codepoints in the recognized pattern.
        /// Resets the buffer position so that only n codepoints have been consumed;
        /// yytext is also re-evaluated. 
        /// </summary>
        /// <param name="n">The number of codepoints to consume</param>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        private void yyless(int n)
        {
            buffer.Pos = tokPos;
            // Must read at least one char, so set before start.
            cCol = tokCol - 1;
            GetCode();
            // Now ensure that line counting is correct.
            lNum = tokLin;
            // And count the rest of the text.
            for (var i = 0; i < n; i++) GetCode();
            MarkEnd();
        }

        //
        //  It would be nice to count backward in the text
        //  but it does not seem possible to re-establish
        //  the correct column counts except by going forward.
        //
        /// <summary>
        /// Removes the last "n" code points from the pattern.
        /// </summary>
        /// <param name="n">The number to remove</param>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        private void _yytrunc(int n)
        {
            yyless(yyleng - n);
        }

        //
        // This is painful, but we no longer count
        // codepoints.  For the overwhelming majority 
        // of cases the single line code is fast, for
        // the others, well, at least it is all in the
        // buffer so no files are touched. Note that we
        // can't use (tokEPos - tokPos) because of the
        // possibility of surrogate pairs in the token.
        //
        /// <summary>
        /// The length of the pattern in codepoints (not the same as 
        /// string-length if the pattern contains any surrogate pairs).
        /// </summary>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly", MessageId = "yyleng")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly", MessageId = "yyleng")]
        public int yyleng
        {
            get
            {
                if (tokELin == tokLin)
                    return tokECol - tokCol;
                else
#if BYTEMODE
                    return tokEPos - tokPos;
#else
                {
                    int ch;
                    int count = 0;
                    int save = buffer.Pos;
                    buffer.Pos = tokPos;
                    do {
                        ch = buffer.Read();
                        if (!char.IsHighSurrogate((char)ch)) count++;
                    } while (buffer.Pos < tokEPos && ch != ScanBuff.EndOfFile);
                    buffer.Pos = save;
                    return count;
                }
#endif // BYTEMODE
            }
        }

        // ============ methods available in actions ==============

        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal int YY_START
        {
            get { return currentScOrd; }
            set
            {
                currentScOrd = value;
                currentStart = startState[value];
            }
        }

        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal void BEGIN(int next)
        {
            currentScOrd = next;
            currentStart = startState[next];
        }

        // ============== The main tokenizer code =================

        private int Scan()
        {
            try
            {
                for (;;)
                {
                    int next; // next state to enter                   
#if BACKUP
                    var rslt = Result.noMatch;
#endif // BACKUP
#if LEFTANCHORS
                    for (;;)
                    {
                        // Discard characters that do not start any pattern.
                        // Must check the left anchor condition after *every* GetCode!
                        state = ((cCol == 0) ? anchorState[currentScOrd] : currentStart);
                        if ((next = NextState()) != goStart) 
                            break; // LOOP EXIT HERE...
                        GetCode();
                    }

#else // !LEFTANCHORS
                    state = currentStart;
                    while ((next = NextState()) == goStart)
                        // At this point, the current character has no
                        // transition from the current state.  We discard 
                        // the "no-match" char.   In traditional LEX such 
                        // characters are echoed to the console.
                        GetCode();
#endif // LEFTANCHORS                    
                    // At last, a valid transition ...    
                    MarkToken();
                    state = next;
                    GetCode();

                    while ((next = NextState()) > eofNum) // Exit for goStart AND for eofNum
#if BACKUP
                        if (state <= maxAccept && next > maxAccept) // need to prepare backup data
                        {
                            // ctx is an object. The fields may be 
                            // mutated by the call to Recurse2.
                            // On return the data in ctx is the
                            // *latest* accept state that was found.

                            rslt = Recurse2(ref ctx, next);
                            if (rslt == Result.noMatch)
                                RestoreStateAndPos(ref ctx);
                            break;
                        }
                        else
#endif // BACKUP
                        {
                            state = next;
                            GetCode();
                        }
                    if (state <= maxAccept)
                    {
                        MarkEnd();

                        #region ActionSwitch

#pragma warning disable 162
                        switch (state)
                        {
                            case eofNum:
                                if (yywrap())
                                    return (int) Token.EOF;
                                break;
                            case 1: // Recognized '{Eol}',	Shortest string "\n"
                            case 2: // Recognized '{Eol}',	Shortest string "\r"
                                return (int) Token.ENDOFLINE;
                                break;
                            case 3: // Recognized '"."',	Shortest string "."
                                return (int) Token.PERIOD;
                                break;
                            case 4: // Recognized '{D}+{IS}?',	Shortest string "0"
                            case 86: // Recognized '{D}+{IS}?',	Shortest string "0L"
                            case 87: // Recognized '{D}+{IS}?',	Shortest string "0U"
                            case 88: // Recognized '{D}+{IS}?',	Shortest string "0l"
                            case 89: // Recognized '{D}+{IS}?',	Shortest string "0UL"
                            case 90: // Recognized '{D}+{IS}?',	Shortest string "0Ul"
                            case 91: // Recognized '{D}+{IS}?',	Shortest string "0LU"
                            case 92: // Recognized '{D}+{IS}?',	Shortest string "0LL"
                                yylval.tVal = yytext;
                                return (int) Token.CONSTANT;
                                break;
                            case 5: // Recognized '":"',	Shortest string ":"
                                return (int) Token.COLON;
                                break;
                            case 6: // Recognized '{RL}({TID}|{D})*',	Shortest string "A"
                            case 7: // Recognized '{RL}({TID}|{D})*',	Shortest string "B"
                            case 8: // Recognized '{RL}({TID}|{D})*',	Shortest string "C"
                            case 9: // Recognized '{RL}({TID}|{D})*',	Shortest string "D"
                            case 10: // Recognized '{RL}({TID}|{D})*',	Shortest string "I"
                            case 11: // Recognized '{RL}({TID}|{D})*',	Shortest string "L"
                            case 12: // Recognized '{RL}({TID}|{D})*',	Shortest string "P"
                            case 13: // Recognized '{RL}({TID}|{D})*',	Shortest string "R"
                            case 14: // Recognized '{RL}({TID}|{D})*',	Shortest string "S"
                            case 15: // Recognized '{RL}({TID}|{D})*',	Shortest string "W"
                            case 16: // Recognized '{RL}({TID}|{D})*',	Shortest string "X"
                            case 17: // Recognized '{RL}({TID}|{D})*',	Shortest string "a"
                            case 18: // Recognized '{RL}({TID}|{D})*',	Shortest string "n"
                            case 19: // Recognized '{RL}({TID}|{D})*',	Shortest string "na"
                            case 20: // Recognized '{RL}({TID}|{D})*',	Shortest string "nam"
                            case 21: // Recognized '{RL}({TID}|{D})*',	Shortest string "name"
                            case 22: // Recognized '{RL}({TID}|{D})*',	Shortest string "names"
                            case 23: // Recognized '{RL}({TID}|{D})*',	Shortest string "namesp"
                            case 24: // Recognized '{RL}({TID}|{D})*',	Shortest string "namespa"
                            case 25: // Recognized '{RL}({TID}|{D})*',	Shortest string "namespac"
                            case 27: // Recognized '{RL}({TID}|{D})*',	Shortest string "AS"
                            case 28: // Recognized '{RL}({TID}|{D})*',	Shortest string "ar"
                            case 29: // Recognized '{RL}({TID}|{D})*',	Shortest string "arc"
                            case 30: // Recognized '{RL}({TID}|{D})*',	Shortest string "arch"
                            case 31: // Recognized '{RL}({TID}|{D})*',	Shortest string "archi"
                            case 32: // Recognized '{RL}({TID}|{D})*',	Shortest string "archit"
                            case 33: // Recognized '{RL}({TID}|{D})*',	Shortest string "archite"
                            case 34: // Recognized '{RL}({TID}|{D})*',	Shortest string "architec"
                            case 35: // Recognized '{RL}({TID}|{D})*',	Shortest string "architect"
                            case 36: // Recognized '{RL}({TID}|{D})*',	Shortest string "architectu"
                            case 37: // Recognized '{RL}({TID}|{D})*',	Shortest string "architectur"
                            case 39: // Recognized '{RL}({TID}|{D})*',	Shortest string "ASC"
                            case 40: // Recognized '{RL}({TID}|{D})*',	Shortest string "ASCI"
                            case 43: // Recognized '{RL}({TID}|{D})*',	Shortest string "XW"
                            case 45: // Recognized '{RL}({TID}|{D})*',	Shortest string "WO"
                            case 46: // Recognized '{RL}({TID}|{D})*',	Shortest string "WOR"
                            case 48: // Recognized '{RL}({TID}|{D})*',	Shortest string "SI"
                            case 49: // Recognized '{RL}({TID}|{D})*',	Shortest string "SQ"
                            case 50: // Recognized '{RL}({TID}|{D})*',	Shortest string "SQU"
                            case 51: // Recognized '{RL}({TID}|{D})*',	Shortest string "SQUO"
                            case 52: // Recognized '{RL}({TID}|{D})*',	Shortest string "SQUOZ"
                            case 54: // Recognized '{RL}({TID}|{D})*',	Shortest string "SIX"
                            case 55: // Recognized '{RL}({TID}|{D})*',	Shortest string "SIXB"
                            case 56: // Recognized '{RL}({TID}|{D})*',	Shortest string "SIXBI"
                            case 58: // Recognized '{RL}({TID}|{D})*',	Shortest string "RA"
                            case 59: // Recognized '{RL}({TID}|{D})*',	Shortest string "RAD"
                            case 60: // Recognized '{RL}({TID}|{D})*',	Shortest string "RADI"
                            case 62: // Recognized '{RL}({TID}|{D})*',	Shortest string "RADIX5"
                            case 64: // Recognized '{RL}({TID}|{D})*',	Shortest string "PO"
                            case 65: // Recognized '{RL}({TID}|{D})*',	Shortest string "POI"
                            case 66: // Recognized '{RL}({TID}|{D})*',	Shortest string "POIN"
                            case 68: // Recognized '{RL}({TID}|{D})*',	Shortest string "IO"
                            case 69: // Recognized '{RL}({TID}|{D})*',	Shortest string "IOW"
                            case 71: // Recognized '{RL}({TID}|{D})*',	Shortest string "CL"
                            case 72: // Recognized '{RL}({TID}|{D})*',	Shortest string "CLA"
                            case 73: // Recognized '{RL}({TID}|{D})*',	Shortest string "CLAS"
                            case 75: // Recognized '{RL}({TID}|{D})*',	Shortest string "BL"
                            case 76: // Recognized '{RL}({TID}|{D})*',	Shortest string "BY"
                            case 77: // Recognized '{RL}({TID}|{D})*',	Shortest string "BYT"
                            case 78: // Recognized '{RL}({TID}|{D})*',	Shortest string "BYTe"
                            case 79: // Recognized '{RL}({TID}|{D})*',	Shortest string "BYTeE"
                            case 81: // Recognized '{RL}({TID}|{D})*',	Shortest string "BLO"
                            case 82: // Recognized '{RL}({TID}|{D})*',	Shortest string "BLOC"
                                yylval.tVal = yytext;
                                return CheckType(yytext);
                                break;
                            case 26: // Recognized '"namespace"',	Shortest string "namespace"
                                return (int) Token.NAMESPACE;
                                break;
                            case 38: // Recognized '"architecture"',	Shortest string "architecture"
                                return (int) Token.ARCHITECTURE;
                                break;
                            case 41: // Recognized '[aA][sS][cC][iI][iI]',	Shortest string "ASCII"
                                return (int) Token.ASCII;
                                break;
                            case 42: // Recognized '[aA][sS][cC][iI][zZ]',	Shortest string "ASCIZ"
                                return (int) Token.ASCIZ;
                                break;
                            case 44: // Recognized '[xX][wW][dD]',	Shortest string "XWD"
                                return (int) Token.XWD;
                                break;
                            case 47: // Recognized '[wW][oO][rR][dD]',	Shortest string "WORD"
                                return (int) Token.WORD;
                                break;
                            case 53: // Recognized '[sS][qQ][uU][oO][zZ][eE]',	Shortest string "SQUOZE"
                                return (int) Token.RAD50;
                                break;
                            case 57: // Recognized '[sS][iI][xX][bB][iI][tT]',	Shortest string "SIXBIT"
                                return (int) Token.SIXBIT;
                                break;
                            case 61: // Recognized '[rR][aA][dD][iI][xX]',	Shortest string "RADIX"
                                return (int) Token.RADIX;
                                break;
                            case 63: // Recognized '[rR][aA][dD][iI][xX]"50"',	Shortest string "RADIX50"
                                return (int) Token.RAD50;
                                break;
                            case 67: // Recognized '[pP][oO][iI][nN][tT]',	Shortest string "POINT"
                                return (int) Token.POINT;
                                break;
                            case 70: // Recognized '[iI][oO][wW][dD]',	Shortest string "IOWD"
                                return (int) Token.IOWD;
                                break;
                            case 74: // Recognized '[cC][lL][aA][sS][sS]',	Shortest string "CLASS"
                                return (int) Token.CLASS;
                                break;
                            case 80: // Recognized '[bB][yY][tT]eE]',	Shortest string "BYTeE]"
                                return (int) Token.BYTE;
                                break;
                            case 83: // Recognized '[bB][lL][oO][cC][kK]',	Shortest string "BLOCK"
                                return (int) Token.WORD;
                                break;
                            case 84: // Recognized '"@@OPEN@@"',	Shortest string "@@OPEN@@"
                                return (int) Token.OPENLEVEL;
                                break;
                            case 85: // Recognized '"@@CLOSE@@"',	Shortest string "@@CLOSE@@"
                                return (int) Token.CLOSELEVEL;
                                break;
                            case 93: // Recognized '"//"[^\n]*',	Shortest string "//"
                                {}
                                break;
                            case 94: // Recognized '"."{RL}({TID}|{D})*',	Shortest string ".A"
                                yylval.tVal = yytext;
                                return CheckType(yytext);
                                break;
                            case 95: // Recognized 'L?\"(\\.|[^\\"\n])*\"',	Shortest string "\"\""
                                yylval.tVal = yytext;
                                return (int) Token.CONSTANT_STRING;
                                break;
                            default:
                                break;
                        }
#pragma warning restore 162

                        #endregion
                    }
                }
            } // end try
            finally
            {
// User-specified epilog to scan()
                yylloc = new LexLocation(tokLin, tokCol, tokELin, tokECol);
// End, user-specified epilog
            } // end finally
        }

#if BACKUP
        private Result Recurse2(ref Context ctx, int next)
        {
            // Assert: at entry "state" is an accept state AND
            //         NextState(state, code) != goStart AND
            //         NextState(state, code) is not an accept state.
            //
            SaveStateAndPos(ref ctx);
            state = next;
            GetCode();

            while ((next = NextState()) > eofNum)
            {
                if (state <= maxAccept && next > maxAccept) // need to update backup data
                    SaveStateAndPos(ref ctx);
                state = next;
                if (state == eofNum) return Result.accept;
                GetCode();
            }
            return (state <= maxAccept ? Result.accept : Result.noMatch);
        }

        private void SaveStateAndPos(ref Context ctx)
        {
            ctx.bPos = buffer.Pos;
            ctx.rPos = readPos;
            ctx.cCol = cCol;
            ctx.lNum = lNum;
            ctx.state = state;
            ctx.cChr = code;
        }

        private void RestoreStateAndPos(ref Context ctx)
        {
            buffer.Pos = ctx.bPos;
            readPos = ctx.rPos;
            cCol = ctx.cCol;
            lNum = ctx.lNum;
            state = ctx.state;
            code = ctx.cChr;
        }

#endif // BACKUP

        // ============= End of the tokenizer code ================

#if STACK
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal void yy_clear_stack()
        {
            scStack.Clear();
        }

        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal int yy_top_state()
        {
            return scStack.Peek();
        }

        internal void yy_push_state(int state)
        {
            scStack.Push(currentScOrd);
            BEGIN(state);
        }

        internal void yy_pop_state()
        {
            // Protect against input errors that pop too far ...
            if (scStack.Count > 0)
            {
                var newSc = scStack.Pop();
                BEGIN(newSc);
            } // Otherwise leave stack unchanged.
        }
#endif // STACK

        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal void ECHO()
        {
            Console.Out.Write(yytext);
        }
    } // end class $Scanner
} // end namespace